{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOWCgbmDNpMiMSm50e7RKHh"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oiFCU2pDUIFl",
        "outputId": "c36b68a0-9942-4fd5-81c2-a03f70054e19"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Installing required packages...\n",
            "  ______                    _             __          \n",
            " /_  __/__  _________ ___  (_)___  ____ _/ /___ __  __\n",
            "  / / / _ \\/ ___/ __ `__ \\/ / __ \\/ __ `/ / __ `/ |/_/\n",
            " / / /  __/ /  / / / / / / / / / / /_/ / / /_/ />  <  \n",
            "/_/  \\___/_/  /_/ /_/ /_/_/_/ /_/\\__,_/_/\\__,_/_/|_|  \n",
            "                                                      \n",
            "\n",
            "Your ultimate terminal assistant with NLP and command execution.\n",
            "+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+-+\n",
            "|H|a|c|k| |t|h|e| |P|l|a|n|e|t|!|\n",
            "+-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+-+\n",
            "\n",
            "Type 'help' to list available commands or 'exit' to quit.\n"
          ]
        }
      ],
      "source": [
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "\n",
        "# Define the packages to install\n",
        "required_packages = [\"llamaapi\", \"colorama\", \"termcolor\", \"pyfiglet\"]\n",
        "\n",
        "# Function to install packages\n",
        "def install_packages():\n",
        "    print(\"Installing required packages...\")\n",
        "    for package in required_packages:\n",
        "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n",
        "\n",
        "# Check and install the packages\n",
        "install_packages()\n",
        "\n",
        "# Imports after installation\n",
        "import json\n",
        "import shlex\n",
        "from llamaapi import LlamaAPI\n",
        "from colorama import init, Fore, Style\n",
        "from termcolor import colored\n",
        "import pyfiglet\n",
        "\n",
        "# Initialize colorama\n",
        "init(autoreset=True)\n",
        "\n",
        "# Replace with your actual API key\n",
        "llama = LlamaAPI(\"LL-Qig6k4VbqcY1vfjf14pJ4FkhsK5G13C8vhsWKsiekTBw10GA3aFW4YsQmzvrPN7d\")\n",
        "\n",
        "# Define dangerous commands and their descriptions\n",
        "dangerous_commands = {\n",
        "    \"rm\": \"remove files or directories\",\n",
        "    \"dd\": \"disk write operation\",\n",
        "    \"mkfs\": \"format filesystem\",\n",
        "    \"shutdown\": \"shutdown the system\",\n",
        "    \"reboot\": \"reboot the system\",\n",
        "    # Add more as needed\n",
        "}\n",
        "\n",
        "# List of common Linux commands (not exhaustive)\n",
        "linux_commands = [\n",
        "    \"ls\", \"cd\", \"pwd\", \"cp\", \"mv\", \"cat\", \"echo\", \"touch\", \"mkdir\", \"rmdir\",\n",
        "    \"ps\", \"top\", \"kill\", \"grep\", \"find\", \"chmod\", \"chown\", \"ifconfig\", \"ping\",\n",
        "    \"df\", \"du\", \"tar\", \"zip\", \"unzip\", \"nano\", \"vi\", \"wget\", \"curl\"\n",
        "]\n",
        "\n",
        "def print_header():\n",
        "    # Generate ASCII art with a hacker theme\n",
        "    header = pyfiglet.figlet_format(\"Terminalax\", font=\"slant\")\n",
        "    description = \"Your ultimate terminal assistant with NLP and command execution.\"\n",
        "    hacker_art = pyfiglet.figlet_format(\"Hack the Planet!\", font=\"digital\")\n",
        "\n",
        "    print(colored(header, 'green', attrs=['bold']))\n",
        "    print(colored(description, 'cyan'))\n",
        "    print(colored(hacker_art, 'red', attrs=['bold']))\n",
        "\n",
        "def prompt_to_command(prompt):\n",
        "    \"\"\"Converts a natural language prompt to a command using Llama API.\"\"\"\n",
        "    api_request_json = {\n",
        "        \"messages\": [\n",
        "            {\"role\": \"user\", \"content\": prompt},\n",
        "            {\"role\": \"assistant\", \"content\": \"Give only the command.\"}\n",
        "        ],\n",
        "        \"stream\": False\n",
        "    }\n",
        "    try:\n",
        "        response = llama.run(api_request_json)\n",
        "        response_data = response.json()\n",
        "        if \"choices\" in response_data and len(response_data[\"choices\"]) > 0:\n",
        "            command = response_data[\"choices\"][0][\"message\"][\"content\"]\n",
        "            return command.strip()\n",
        "        else:\n",
        "            print(colored(\"No command generated.\", 'red'))\n",
        "            return None\n",
        "    except Exception as e:\n",
        "        print(colored(f\"An error occurred: {e}\", 'red'))\n",
        "        return None\n",
        "\n",
        "def confirm_and_execute(command):\n",
        "    \"\"\"Checks for dangerous commands and executes after user confirmation.\"\"\"\n",
        "    parts = shlex.split(command)\n",
        "    base_command = parts[0]\n",
        "    if base_command in dangerous_commands:\n",
        "        confirmation = input(colored(f\"Are you sure you want to execute this command: '{command}'? (yes/no): \", 'yellow')).strip().lower()\n",
        "        if confirmation != 'yes':\n",
        "            print(colored(\"Command aborted.\", 'red'))\n",
        "            return None\n",
        "    return execute_command(command)\n",
        "\n",
        "def execute_command(command):\n",
        "    \"\"\"Executes the given command and provides detailed feedback.\"\"\"\n",
        "    try:\n",
        "        print(colored(f\"Executing Command: {command}\", 'green'))\n",
        "        result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)\n",
        "        print(colored(result.stdout, 'blue'))\n",
        "        return True\n",
        "    except subprocess.CalledProcessError as exec_error:\n",
        "        print(colored(f\"Execution Error: {exec_error}\", 'red'))\n",
        "        return False\n",
        "    except Exception as e:\n",
        "        print(colored(f\"An unexpected error occurred: {e}\", 'red'))\n",
        "        return False\n",
        "\n",
        "def main():\n",
        "    print_header()\n",
        "    print(colored(\"Type 'help' to list available commands or 'exit' to quit.\", 'cyan'))\n",
        "    while True:\n",
        "        user_prompt = input(colored(\"Enter your prompt: \", 'cyan'))\n",
        "        if user_prompt.lower() == 'exit':\n",
        "            print(colored(\"Exiting...\", 'green'))\n",
        "            break\n",
        "        elif user_prompt.lower() == 'help':\n",
        "            print(colored(\"Available commands: \", 'cyan'))\n",
        "            print(colored(\", \".join(linux_commands), 'yellow'))\n",
        "            continue\n",
        "\n",
        "        command = prompt_to_command(user_prompt)\n",
        "        if command:\n",
        "            print(colored(f\"Generated Command: {command}\", 'magenta'))\n",
        "            confirm_and_execute(command)\n",
        "        else:\n",
        "            print(colored(\"No command to execute.\", 'red'))\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}